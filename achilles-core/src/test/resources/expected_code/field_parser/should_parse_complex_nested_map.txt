/** * Meta class for 'map' property <br/> * The meta class exposes some useful methods: <ul> *    <li>encodeFromJava: encode a property from raw Java to CQL java compatible type </li> *    <li>encodeField: extract the current property value from the given info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs instance and encode to CQL java compatible type </li> *    <li>decodeFromGettable: decode from a {@link com.datastax.driver.core.GettableData} instance (Row, UDTValue, TupleValue) the current property</li> * </ul> */@java.lang.SuppressWarnings({"serial", "unchecked"})public static final info.archinnov.achilles.internals.metamodel.MapProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT, java.lang.String, java.util.Map<java.lang.Integer, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>>, java.util.Map<java.lang.Integer, com.datastax.driver.core.TupleValue>> map = new info.archinnov.achilles.internals.metamodel.MapProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT, java.lang.String, java.util.Map<java.lang.Integer, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>>, java.util.Map<java.lang.Integer, com.datastax.driver.core.TupleValue>>(new info.archinnov.achilles.internals.metamodel.columns.FieldInfo<>((info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$) -> entity$.getMap(), (info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$, java.util.Map<info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT, java.util.Map<java.lang.Integer, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>>> value$) -> entity$.setMap(value$), "map", "map", info.archinnov.achilles.internals.metamodel.columns.ColumnType.NORMAL, new info.archinnov.achilles.internals.metamodel.columns.ColumnInfo(false), info.archinnov.achilles.internals.metamodel.index.IndexInfo.noIndex()), false, true, new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT, java.lang.String>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT> of("map", "map", true), com.datastax.driver.core.DataType.text(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT>(){}, new com.google.common.reflect.TypeToken<java.lang.String>(){}, new info.archinnov.achilles.internals.codec.JSONCodec<>(info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT.class, com.fasterxml.jackson.databind.type.SimpleType.construct(info.archinnov.achilles.internals.sample_classes.parser.field.TestUDT.class))), new info.archinnov.achilles.internals.metamodel.MapProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer, java.lang.Integer, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>, com.datastax.driver.core.TupleValue>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.util.Map<java.lang.Integer, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>>> of("map", "map", true), true, true, new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer, java.lang.Integer>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer> of("map", "map", true), com.datastax.driver.core.DataType.cint(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new info.archinnov.achilles.internals.codec.FallThroughCodec<>(java.lang.Integer.class)), new info.archinnov.achilles.internals.metamodel.Tuple3Property<>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, info.archinnov.achilles.type.tuples.Tuple3<java.lang.Integer, java.lang.Integer, com.datastax.driver.core.ConsistencyLevel>> of("map", "map", true), new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer, java.lang.String>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer> of("map", "map", true), com.datastax.driver.core.DataType.text(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new com.google.common.reflect.TypeToken<java.lang.String>(){}, new info.archinnov.achilles.internals.sample_classes.codecs.IntToStringCodec()), new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer, java.lang.Integer>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.lang.Integer> of("map", "map", true), com.datastax.driver.core.DataType.cint(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new info.archinnov.achilles.internals.codec.FallThroughCodec<>(java.lang.Integer.class)), new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, com.datastax.driver.core.ConsistencyLevel, java.lang.Integer>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, com.datastax.driver.core.ConsistencyLevel> of("map", "map", true), com.datastax.driver.core.DataType.cint(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<com.datastax.driver.core.ConsistencyLevel>(){}, new com.google.common.reflect.TypeToken<java.lang.Integer>(){}, new info.archinnov.achilles.internals.codec.EnumOrdinalCodec<>(java.util.Arrays.asList(com.datastax.driver.core.ConsistencyLevel.values()), com.datastax.driver.core.ConsistencyLevel.class)))));