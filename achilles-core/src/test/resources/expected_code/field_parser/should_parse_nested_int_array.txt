/** * Meta class for 'nestedArrays' property <br/> * The meta class exposes some useful methods: <ul> *    <li>encodeFromJava: encode a property from raw Java to CQL java compatible type </li> *    <li>encodeField: extract the current property value from the given info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs instance and encode to CQL java compatible type </li> *    <li>decodeFromGettable: decode from a {@link com.datastax.driver.core.GettableData} instance (Row, UDTValue, TupleValue) the current property</li> * </ul> */@java.lang.SuppressWarnings({"serial", "unchecked"})public static final info.archinnov.achilles.internals.metamodel.ListProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.util.Map<com.datastax.driver.core.ProtocolVersion, java.util.List<int[]>>, java.util.Map<java.lang.String, java.util.List<int[]>>> nestedArrays = new info.archinnov.achilles.internals.metamodel.ListProperty<>(new info.archinnov.achilles.internals.metamodel.columns.FieldInfo<>((info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$) -> entity$.getNestedArrays(), (info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$, java.util.List<java.util.Map<com.datastax.driver.core.ProtocolVersion, java.util.List<int[]>>> value$) -> entity$.setNestedArrays(value$), "nestedArrays", "nested_arrays", info.archinnov.achilles.internals.metamodel.columns.ColumnType.NORMAL, new info.archinnov.achilles.internals.metamodel.columns.ColumnInfo(false), info.archinnov.achilles.internals.metamodel.index.IndexInfo.noIndex()), false, false, java.util.Map.class, new info.archinnov.achilles.internals.metamodel.MapProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, com.datastax.driver.core.ProtocolVersion, java.lang.String, java.util.List<int[]>, java.util.List<int[]>>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.util.Map<com.datastax.driver.core.ProtocolVersion, java.util.List<int[]>>> of("nestedArrays", "nested_arrays", true), true, false, new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, com.datastax.driver.core.ProtocolVersion, java.lang.String>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, com.datastax.driver.core.ProtocolVersion> of("nestedArrays", "nested_arrays", true), com.datastax.driver.core.DataType.text(), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<com.datastax.driver.core.ProtocolVersion>(){}, new com.google.common.reflect.TypeToken<java.lang.String>(){}, new info.archinnov.achilles.internals.codec.EnumNameCodec<>(java.util.Arrays.asList(com.datastax.driver.core.ProtocolVersion.values()), com.datastax.driver.core.ProtocolVersion.class)), new info.archinnov.achilles.internals.metamodel.ListProperty<>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, java.util.List<int[]>> of("nestedArrays", "nested_arrays", true), false, false, int[].class, new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, int[], int[]>(info.archinnov.achilles.internals.metamodel.columns.FieldInfo.<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, int[]> of("nestedArrays", "nested_arrays", true), com.datastax.driver.core.DataType.frozenList(DataType.cint()), gettable$ -> null, (udt$, value$) -> {}, new com.google.common.reflect.TypeToken<int[]>(){}, new com.google.common.reflect.TypeToken<int[]>(){}, new info.archinnov.achilles.internals.codec.FallThroughCodec<>(int[].class)))));